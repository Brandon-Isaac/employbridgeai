{
  "version": 3,
  "sources": ["src/app/job-seeker/components/chatbot/chatbot.component.ts"],
  "sourcesContent": ["import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\n\r\ninterface Message {\r\n  type: 'user' | 'bot';\r\n  content: string;\r\n  timestamp: Date;\r\n  loading?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-chatbot',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    FormsModule,\r\n    MatChipsModule,\r\n    MatProgressBarModule,\r\n  ],\r\n  template: `\r\n    <div class=\"chatbot-container\">\r\n      <mat-card class=\"chatbot-card\">\r\n        <mat-card-header>\r\n          <mat-card-title>Database Query Assistant</mat-card-title>\r\n          <mat-card-subtitle>Ask questions about your data</mat-card-subtitle>\r\n        </mat-card-header>\r\n\r\n        <mat-card-content class=\"chat-content\">\r\n          <div class=\"messages-container\">\r\n            <div\r\n              *ngFor=\"let message of messages\"\r\n              [class]=\"'message ' + message.type\"\r\n            >\r\n              <div class=\"message-content\">\r\n                <div class=\"message-text\">{{ message.content }}</div>\r\n                <div class=\"message-time\">\r\n                  {{ message.timestamp | date : 'shortTime' }}\r\n                </div>\r\n              </div>\r\n              <mat-progress-bar\r\n                *ngIf=\"message.loading\"\r\n                mode=\"indeterminate\"\r\n              ></mat-progress-bar>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"suggested-queries\">\r\n            <mat-chip-set>\r\n              <mat-chip\r\n                *ngFor=\"let query of suggestedQueries\"\r\n                (click)=\"sendMessage(query)\"\r\n              >\r\n                {{ query }}\r\n              </mat-chip>\r\n            </mat-chip-set>\r\n          </div>\r\n\r\n          <div class=\"input-container\">\r\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n              <mat-label>Type your question</mat-label>\r\n              <input\r\n                matInput\r\n                [(ngModel)]=\"userInput\"\r\n                (keyup.enter)=\"sendMessage(userInput)\"\r\n                placeholder=\"e.g., Show me my skill progress\"\r\n              />\r\n              <button\r\n                mat-icon-button\r\n                matSuffix\r\n                (click)=\"sendMessage(userInput)\"\r\n              >\r\n                <mat-icon>send</mat-icon>\r\n              </button>\r\n            </mat-form-field>\r\n          </div>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [\r\n    `\r\n      .chatbot-container {\r\n        padding: 20px;\r\n        max-width: 800px;\r\n        margin: 0 auto;\r\n      }\r\n\r\n      .chatbot-card {\r\n        height: 100%;\r\n      }\r\n\r\n      .chat-content {\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: calc(100vh - 200px);\r\n        padding: 16px;\r\n      }\r\n\r\n      .messages-container {\r\n        flex: 1;\r\n        overflow-y: auto;\r\n        padding: 16px;\r\n        margin-bottom: 16px;\r\n        background-color: #f5f5f5;\r\n        border-radius: 8px;\r\n      }\r\n\r\n      .message {\r\n        margin-bottom: 16px;\r\n        max-width: 80%;\r\n      }\r\n\r\n      .message.user {\r\n        margin-left: auto;\r\n      }\r\n\r\n      .message.bot {\r\n        margin-right: auto;\r\n      }\r\n\r\n      .message-content {\r\n        padding: 12px;\r\n        border-radius: 8px;\r\n        background-color: white;\r\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n      }\r\n\r\n      .message.user .message-content {\r\n        background-color: #e3f2fd;\r\n      }\r\n\r\n      .message-text {\r\n        margin-bottom: 4px;\r\n      }\r\n\r\n      .message-time {\r\n        font-size: 12px;\r\n        color: #666;\r\n        text-align: right;\r\n      }\r\n\r\n      .suggested-queries {\r\n        margin-bottom: 16px;\r\n      }\r\n\r\n      .input-container {\r\n        margin-top: auto;\r\n      }\r\n\r\n      .full-width {\r\n        width: 100%;\r\n      }\r\n\r\n      mat-chip {\r\n        cursor: pointer;\r\n      }\r\n\r\n      mat-chip:hover {\r\n        background-color: #e0e0e0;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class ChatbotComponent {\r\n  userInput = '';\r\n  messages: Message[] = [];\r\n  suggestedQueries = [\r\n    'Show me my skill progress',\r\n    'What are my top skills?',\r\n    'Which skills need improvement?',\r\n    'Compare my skills with job requirements',\r\n  ];\r\n\r\n  constructor() {\r\n    // Add welcome message\r\n    this.messages.push({\r\n      type: 'bot',\r\n      content:\r\n        'Hello! I can help you analyze your skills and career data. What would you like to know?',\r\n      timestamp: new Date(),\r\n    });\r\n  }\r\n\r\n  async sendMessage(message: string) {\r\n    if (!message.trim()) return;\r\n\r\n    // Add user message\r\n    this.messages.push({\r\n      type: 'user',\r\n      content: message,\r\n      timestamp: new Date(),\r\n    });\r\n\r\n    // Clear input\r\n    this.userInput = '';\r\n\r\n    // Add loading message\r\n    const loadingMessage: Message = {\r\n      type: 'bot',\r\n      content: 'Thinking...',\r\n      timestamp: new Date(),\r\n      loading: true,\r\n    };\r\n    this.messages.push(loadingMessage);\r\n\r\n    // Simulate API call\r\n    await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n    // Remove loading message\r\n    this.messages = this.messages.filter((m) => m !== loadingMessage);\r\n\r\n    // Add bot response\r\n    this.messages.push({\r\n      type: 'bot',\r\n      content: this.generateResponse(message),\r\n      timestamp: new Date(),\r\n    });\r\n  }\r\n\r\n  private generateResponse(query: string): string {\r\n    // This is a placeholder for actual AI/API integration\r\n    const responses: { [key: string]: string } = {\r\n      'Show me my skill progress':\r\n        'Your skill progress shows significant improvement in JavaScript (85%) and Angular (80%). Your soft skills are also developing well.',\r\n      'What are my top skills':\r\n        'Your top skills are: JavaScript (90%), Communication (95%), and Team Leadership (80%).',\r\n      'Which skills need improvement':\r\n        'Based on your profile, you could improve: AWS (70%), System Design (65%), and Project Management (75%).',\r\n      'Compare my skills with job requirements':\r\n        'Your skills match 85% of the requirements for Senior Frontend Developer positions. You excel in technical skills but could improve in cloud technologies.',\r\n    };\r\n\r\n    return (\r\n      responses[query] ||\r\n      'I can help you analyze your skills and career data. Try asking about your skill progress, top skills, or areas for improvement.'\r\n    );\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
